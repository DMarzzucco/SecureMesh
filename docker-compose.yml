services:

  # Database Container
  db:
    image: postgres
    container_name: data_base_pg
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: data_base
    ports:
      - "5432:5432"
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - compose-bridge

  # Hangfire database
  db_hangfire:
    image: postgres
    container_name: data_base_pg_hangfire
    restart: always
    environment:
      POSTGRES_USER: hangfire
      POSTGRES_PASSWORD: password
      POSTGRES_DB: data_base_hangfire
    ports:
      - "5433:5432"  
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - db-hangfire-bridge
  #Redis
  redis:
    image: redis:latest
    container_name: redis_container
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - redis_network
  #RabbitMQ Container
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - rabbit_network

  #Worker 1 Verification Email
  worker1:
    container_name: worker1_verification_email
    image: ${DOCKER_REGISTRY}worker1
    build: 
      context: ./Workers/verification_email
      dockerfile: Dockerfile
    # entrypoint: [ "/bin/sh", "-c", "/wait-for-it.sh rabbitmq:5672 -- dotnet EmailVerificationWorker.dll" ]
    networks:
      - rabbit_network
    depends_on:
      - rabbitmq

  # Worker 2 Welcome Message   
  worker2:
    container_name: worker2_welcome_message
    image: ${DOCKER_REGISTRY}worker2
    build: 
      context: ./Workers/welcome_message
      dockerfile: Dockerfile
    # entrypoint: [ "/bin/sh", "-c", "/wait-for-it.sh rabbitmq:5672 -- dotnet WelcomeMessageWorker.dll" ]
    networks:
      - rabbit_network
    depends_on:
      - rabbitmq
  # Worker 3 Account Recuperation   
  worker3:
    container_name: worker3_account_recuperation
    image: ${DOCKER_REGISTRY}worker3
    build: 
      context: ./Workers/password_recuperation
      dockerfile: Dockerfile
    # entrypoint: [ "/bin/sh", "-c", "/wait-for-it.sh rabbitmq:5672 -- dotnet PasswordRecuperation.dll" ]
    networks:
      - rabbit_network
    depends_on:
      - rabbitmq
  worker4:
    container_name: worker4_verification_new_email
    image: ${DOCKER_REGISTRY}worker4
    build: 
      context: .
      dockerfile: Workers/NewEmailVerificationWorker/Dockerfile
    # entrypoint: [ "/bin/sh", "-c", "/wait-for-it.sh rabbitmq:5672 -- dotnet NewEmailVerificationWorke.dll" ]
    networks:
      - rabbit_network
    depends_on:
      - rabbitmq

  #Hangfire Servies
  hangfire:
    environment:
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/hanguser.pfx
      - ASPNETCORE_Kestrel__Certificates__Default__Password=pass123
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=3434
      - ASPNETCORE_HTTPS_PORTS=3434
    container_name: hangfire_server.net
    image: ${DOCKER_REGISTRY-}hangfire
    build:
      context: .
      dockerfile: Server/HangfireUserServer/Dockerfile
    ports:
      - "3434:3434"
    volumes:
      - ./certs/hangfire/hanguser.pfx:/https/hanguser.pfx
    networks:
      - db-hangfire-bridge
      - compose-bridge
    depends_on:
      - db_hangfire

  #User Api Container
  user:
    environment:
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetcert.pfx
      - ASPNETCORE_Kestrel__Certificates__Default__Password=pass123
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=4080
      - ASPNETCORE_HTTPS_PORTS=4080
    container_name: user.net
    image: ${DOCKER_REGISTRY-}user
    build:
      context: .
      dockerfile: Service/User/Dockerfile
    ports:
      - "4080:4080"
    volumes:
      - ./certs/user/aspnetcert.pfx:/https/aspnetcert.pfx
    networks:
      - compose-bridge
      - db-hangfire-bridge
    depends_on:
      - db
      
  # Security Api Container
  auth:
    environment:
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/cert.pfx
      - ASPNETCORE_Kestrel__Certificates__Default__Password=pass123
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=5090
      - ASPNETCORE_HTTPS_PORTS=5090
    container_name: auth.net
    image: ${DOCKER_REGISTRY-}auth
    build:
      context: .
      dockerfile: Service/Security/Dockerfile
    ports:
      - "5090:5090"
    depends_on:
      - user
      - redis
      - rabbitmq
    volumes:
      - ./certs/auth/cert.pfx:/https/cert.pfx
      - ./scripts/wait-for-it.sh:/wait-for-it.sh
    entrypoint: [ "/bin/sh", "-c", "/wait-for-it.sh user:4080 -- dotnet Security.dll" ]
    networks:
      - compose-bridge
      - rabbit_network
      - redis_network

  # Api Gateway Container
  securemesh:
    environment:
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/gate.pfx
      - ASPNETCORE_Kestrel__Certificates__Default__Password=pass123
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8888
      - ASPNETCORE_HTTPS_PORTS=8888
    container_name: gate.net
    image: ${DOCKER_REGISTRY-}securemesh
    build:
      context: .
      dockerfile: SecureMesh/Dockerfile
    ports:
      - "8888:8888"
    depends_on:
      - auth
    volumes:
      - ./certs/gateway/gate.pfx:/https/gate.pfx
      - ./scripts/wait-for-it.sh:/wait-for-it.sh
    entrypoint: [ "/bin/sh", "-c", "/wait-for-it.sh auth:5090 -- dotnet SecureMesh.dll" ]
    networks:
      - compose-bridge

volumes:
  redis_data:

  rabbitmq_data:
    driver: local

networks:

  redis_network:
    driver: bridge

  rabbit_network:
    driver: bridge
    
  compose-bridge:
    driver: bridge

  db-hangfire-bridge:
    driver : bridge
